{"version":3,"sources":["components/Break.js","components/Session.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","id","disabled","isPlay","onClick","currentInterval","breakInterval","onBreakIntervalChange","className","SessionInterval","sessionInterval","onSessionIntervalChange","Timer","state","timerSeconds","intervalId","isSessionInterval","playStopTimer","bind","resetTimer","event","target","dataset","type","this","onPlayChange","decreaseTimer","clearInterval","setInterval","timerMinute","setState","onTimerMinuteChange","timerClass","data-type","React","Component","App","onResetTimer","newBreakLength","newSessionLength","minuteChange","Break","Session","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7fe450ee.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction BreakInterval(props) {\r\n  function increaseCounter() {\r\n    props.onBreakIntervalChange(props.breakInterval + 1);\r\n  }\r\n\r\n  function decreaseCounter() {\r\n    const currentInterval = props.breakInterval;\r\n\r\n    if (currentInterval === 0) {\r\n      return;\r\n    }\r\n\r\n    props.onBreakIntervalChange(currentInterval - 1);\r\n  }\r\n\r\n  return (\r\n    <section id=\"break-interval-container\">\r\n      <h4>Break Length</h4>\r\n      <section id=\"break-time-interval\">\r\n        <button\r\n          disabled={props.isPlay ? \"disabled\" : \"\"}\r\n          onClick={decreaseCounter}\r\n          className=\"counter-btn\"\r\n        >\r\n          Down\r\n        </button>\r\n        <p className=\"break-time\">{props.breakInterval}</p>\r\n        <button\r\n          disabled={props.isPlay ? \"disabled\" : \"\"}\r\n          onClick={increaseCounter}\r\n          className=\"counter-btn\"\r\n        >\r\n          Up\r\n        </button>\r\n      </section>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default BreakInterval;\r\n","import React from \"react\";\r\n\r\nfunction SessionInterval(props) {\r\n  function increaseCounter() {\r\n    const currentInterval = props.sessionInterval;\r\n\r\n    if (currentInterval >= 60) {\r\n      return;\r\n    }\r\n    props.onSessionIntervalChange(props.sessionInterval + 1);\r\n  }\r\n\r\n  function decreaseCounter() {\r\n    const currentInterval = props.sessionInterval;\r\n\r\n    if (currentInterval === 0) {\r\n      return;\r\n    }\r\n\r\n    props.onSessionIntervalChange(currentInterval - 1);\r\n  }\r\n\r\n  return (\r\n    <section id=\"session-interval-container\">\r\n      <h4>Session Length</h4>\r\n      <section id=\"session-interval\">\r\n        <button\r\n          disabled={props.isPlay ? \"disabled\" : \"\"}\r\n          onClick={decreaseCounter}\r\n          className=\"counter-btn\"\r\n        >\r\n          Down\r\n        </button>\r\n        <p className=\"session-time\">{props.sessionInterval}</p>\r\n        <button\r\n          disabled={props.isPlay ? \"disabled\" : \"\"}\r\n          onClick={increaseCounter}\r\n          className=\"counter-btn\"\r\n        >\r\n          Up\r\n        </button>\r\n      </section>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default SessionInterval;\r\n","import React from \"react\";\r\n\r\nclass Timer extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      timerSeconds: 0,\r\n      intervalId: \"\",\r\n      isSessionInterval: true,\r\n    };\r\n\r\n    this.playStopTimer = this.playStopTimer.bind(this);\r\n    this.resetTimer = this.resetTimer.bind(this);\r\n  }\r\n\r\n  playStopTimer(event) {\r\n    const action = event.target.dataset.type;\r\n\r\n    switch (action) {\r\n      case \"play\":\r\n        this.props.onPlayChange(true);\r\n        this.decreaseTimer();\r\n        break;\r\n      case \"stop\":\r\n        this.props.onPlayChange(false);\r\n        clearInterval(this.state.intervalId);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  decreaseTimer() {\r\n    let intervalId = setInterval(() => {\r\n      switch (this.state.timerSeconds) {\r\n        case 0:\r\n          if (this.props.timerMinute === 0) {\r\n            if (this.state.isSessionInterval) {\r\n              // start break timer\r\n              this.setState({\r\n                isSessionInterval: false,\r\n              });\r\n\r\n              this.props.onTimerMinuteChange(this.props.breakInterval);\r\n            } else {\r\n              // start session timer\r\n              this.setState({\r\n                isSessionInterval: true,\r\n              });\r\n\r\n              this.props.onTimerMinuteChange(this.props.sessionInterval);\r\n            }\r\n          } else {\r\n            this.props.onTimerMinuteChange(this.props.timerMinute - 1);\r\n            this.setState({\r\n              timerSeconds: 59,\r\n            });\r\n          }\r\n          break;\r\n        default:\r\n          this.setState({\r\n            timerSeconds: this.state.timerSeconds - 1,\r\n          });\r\n          break;\r\n      }\r\n    }, 1000);\r\n\r\n    this.setState({\r\n      intervalId: intervalId,\r\n    });\r\n  }\r\n\r\n  resetTimer() {\r\n    clearInterval(this.state.intervalId);\r\n\r\n    this.props.resetTimer();\r\n    this.props.onPlayChange(false);\r\n\r\n    this.setState({\r\n      timerSeconds: 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let timerClass = this.props.timerMinute === 0 ? \"timer-alert\" : \"\";\r\n    timerClass += \" session-timer\";\r\n    return (\r\n      <section>\r\n        <section id=\"session-container\">\r\n          <h4 className=\"session-header\">\r\n            {this.state.isSessionInterval ? \"Session\" : \"Break\"}\r\n          </h4>\r\n          <span className={timerClass}>{this.props.timerMinute}</span>\r\n          <span className={timerClass} id=\"colon\">\r\n            :\r\n          </span>\r\n          <span className={timerClass}>\r\n            {this.state.timerSeconds === 0\r\n              ? \"00\"\r\n              : this.state.timerSeconds < 10\r\n              ? \"0\" + this.state.timerSeconds\r\n              : this.state.timerSeconds}\r\n          </span>\r\n        </section>\r\n        <section id=\"actions-container\">\r\n          <button data-type=\"play\" onClick={this.playStopTimer}>\r\n            Play\r\n          </button>\r\n          <button data-type=\"stop\" onClick={this.playStopTimer}>\r\n            Stop\r\n          </button>\r\n          <button onClick={this.resetTimer}>Refresh</button>\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\nimport BreakInterval from \"./components/Break\";\nimport SessionInterval from \"./components/Session\";\nimport Timer from \"./components/Timer\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      breakInterval: 5,\n      sessionInterval: 25,\n      timerMinute: 25,\n      isPlay: false,\n    };\n\n    this.onBreakIntervalChange = this.onBreakIntervalChange.bind(this);\n    this.onSessionIntervalChange = this.onSessionIntervalChange.bind(this);\n    this.onTimerMinuteChange = this.onTimerMinuteChange.bind(this);\n    this.onPlayChange = this.onPlayChange.bind(this);\n    this.onResetTimer = this.onResetTimer.bind(this);\n  }\n\n  onPlayChange(isPlay) {\n    this.setState({\n      isPlay: isPlay,\n    });\n  }\n\n  onBreakIntervalChange(newBreakLength) {\n    this.setState({\n      breakInterval: newBreakLength,\n    });\n  }\n\n  onSessionIntervalChange(newSessionLength) {\n    this.setState({\n      sessionInterval: newSessionLength,\n      timerMinute: newSessionLength,\n    });\n  }\n\n  onTimerMinuteChange(minuteChange) {\n    this.setState({\n      timerMinute: minuteChange,\n    });\n  }\n\n  onResetTimer() {\n    this.setState({\n      sessionInterval: 25,\n      timerMinute: 25,\n      breakInterval: 5,\n    });\n  }\n\n  render() {\n    return (\n      <main className=\"App\">\n        <section className=\"container\">\n          <h2 className=\"app-title\">Pomodoro Clock</h2>\n          <section id=\"interval-container\">\n            <BreakInterval\n              onBreakIntervalChange={this.onBreakIntervalChange}\n              breakInterval={this.state.breakInterval}\n              isPlay={this.state.isPlay}\n            />\n            <SessionInterval\n              onSessionIntervalChange={this.onSessionIntervalChange}\n              sessionInterval={this.state.sessionInterval}\n              isPlay={this.state.isPlay}\n            />\n          </section>\n          <Timer\n            sessionInterval={this.state.sessionInterval}\n            timerMinute={this.state.timerMinute}\n            onTimerMinuteChange={this.onTimerMinuteChange}\n            breakInterval={this.state.breakInterval}\n            onPlayChange={this.onPlayChange}\n            resetTimer={this.onResetTimer}\n          />\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}